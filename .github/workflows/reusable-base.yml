name: Base CI

on:
  workflow_call:
    inputs:
      no-lockfile:
        default: false
        description: 'Whether to expect a lockfile or not'
        required: false
        type: boolean
      node-versions:
        description: 'A comma separated list of Node versions to test with.'
        required: false
        type: string
      npm-build-script:
        description: 'The name of any npm script to run before the test.'
        required: false
        type: string
      npm-test-script:
        description: 'The name of the npm script that runs the test.'
        required: true
        type: string
      os:
        description: 'A comma separated list of operating systems to test on.'
        required: false
        type: string
      submodules:
        default: false
        description: 'From actions/checkout@v3'
        required: false
        type: string

permissions:
  contents: read

jobs:
  resolve_inputs:
    name: Resolving inputs
    runs-on: ubuntu-latest
    if: ${{ inputs.os || inputs.node-versions}}
    outputs:
      os: ${{ steps.split-os.outputs.splitted }}
      nodeVersions: ${{ steps.split-node-versions.outputs.splitted }}
    steps:
      - id: split-os
        run: echo "splitted=$(echo '${{ inputs.os || 'ubuntu-latest' }}' | jq -R -c 'split(",")')" >> $GITHUB_OUTPUT
      - id: split-node-versions
        run: echo "splitted=$(echo '${{ inputs.node-versions || '18' }}' | jq -R -c 'split(",")')" >> $GITHUB_OUTPUT

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    needs:
      - resolve_inputs
    if: ${{ always() }}

    strategy:
      fail-fast: false
      matrix:
        node_version: ${{ fromJson(needs.resolve_inputs.outputs.nodeVersions || '["18"]') }}
        os: ${{ fromJson(needs.resolve_inputs.outputs.os || '["ubuntu-latest"]') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: ${{ input.submodules }
        

    - name: Use Node.js ${{ matrix.node_version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node_version }}

    - name: Determine npm cache directory windows
      id: npm-cache-dir-windows
      if: runner.os == 'Windows'
      run: echo "dir=$(npm config get cache)" >> $env:GITHUB_OUTPUT
    - name: Determine npm cache directory non-windows
      id: npm-cache-dir
      if: runner.os != 'Windows'
      run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

    # New prefix generated every 120 days, to ensure npm cache doesn't grow too large
    - name: Get npm cache timed expiration
      id: npm-timed-expiration
      run: echo "prefix=$(( $(date +%s) / 60 / 60 / 24 / 120 ))" >> $GITHUB_OUTPUT

    - name: Restore cache using package-lock.json hash
      uses: actions/cache@v3
      if: ${{ !inputs.no-lockfile }}
      with:
        path: ${{ steps.npm-cache-dir-windows.outputs.dir || steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ steps.npm-timed-expiration.outputs.prefix }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ steps.npm-timed-expiration.outputs.prefix }}-

    - name: Restore cache using package.json hash
      uses: actions/cache@v3
      if: ${{ inputs.no-lockfile }}
      with:
        path: ${{ steps.npm-cache-dir-windows.outputs.dir || steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ steps.npm-timed-expiration.outputs.prefix }}-${{ hashFiles('package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ steps.npm-timed-expiration.outputs.prefix }}-

    - run: npm ci --no-audit --no-fund
      if: ${{ !inputs.no-lockfile }}
      env:
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

    - run: npm install --no-audit --no-fund
      if: ${{ inputs.no-lockfile }}
      env:
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

    - name: Build
      run: npm run ${{ inputs.npm-build-script }}
      if: ${{ inputs.npm-build-script }}

    - name: Test
      run: npm run ${{ inputs.npm-test-script }}
