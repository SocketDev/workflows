name: Sync file

# Be aware that the PR opened by this action won't run any actions itself because of
# limitations within GitHub Actions where an Action can't cause another Action to run.
# See eg: https://github.com/orgs/community/discussions/25332#discussioncomment-3247510

on:
  workflow_call:
    secrets:
      GITHUB_TOKEN_OVERRIDE:
        description: 'If you need to override the GITHUB_TOKEN used with the "gh" cli, then do so with this one'
        required: false
    inputs:
      url:
        description: 'The URL to sync from'
        required: false
        type: string
      path:
        description: 'The path to sync it to'
        required: false
        type: string
      gh-release-org:
        description: 'The org name of a GitHub repository to sync a release from. Alternative to url sync'
        required: false
        type: string
      gh-release-repo:
        description: 'The repo name of a GitHub repository to sync a release from. Alternative to url sync'
        required: false
        type: string
      gh-release-subpath:
        description: 'If only syncing a subpath of the release, then specify that path here'
        required: false
        default: ''
        type: string
      branch-name:
        description: 'The name of the branch to create'
        required: false
        default: automated/sync
        type: string
      pr-title:
        description: 'The title of the PR.'
        required: false
        default: 'Syncing of file'
        type: string
      pr-body:
        description: 'The body of the PR.'
        required: false
        default: 'This PR syncs a specified file'
        type: string
      commit-message:
        description: 'The title of the PR.'
        required: false
        default: "fix: sync file"
        type: string
      commit-user:
        description: 'The name to use in the commit.'
        required: false
        default: "github-actions[bot]"
        type: string
      commit-email:
        description: 'The email to use in the commit.'
        required: false
        default: "41898282+github-actions[bot]@users.noreply.github.com"
        type: string
      npm-pre-sync-script:
        description: 'The name of a script to run pre URL-sync.'
        required: false
        type: string
      npm-post-sync-script:
        description: 'The name of a script to run post URL-sync.'
        required: false
        type: string
      no-lockfile:
        description: 'Whether to expect a lockfile or not'
        required: false
        default: false
        type: boolean
      node-version:
        description: 'The node-version to use'
        required: false
        default: 'lts/*'
        type: string
      create-branch-if-needed:
        description: 'Create a branch if one is missing'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  fetch_and_update:
    name: Fetch and sync
    runs-on: ubuntu-latest
    steps:
      # Base setup

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # As we want to check if the remote branch already exists and is up to date
          token: ${{ secrets.GITHUB_TOKEN_OVERRIDE || secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        if: inputs.npm-pre-sync-script || inputs.npm-post-sync-script
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      # Cached npm installation

      - name: Determine npm cache directory windows
        id: npm-cache-dir-windows
        if: (inputs.npm-pre-sync-script || inputs.npm-post-sync-script) && runner.os == 'Windows'
        run: echo "dir=$(npm config get cache)" >> $env:GITHUB_OUTPUT

      - name: Determine npm cache directory non-windows
        id: npm-cache-dir
        if: (inputs.npm-pre-sync-script || inputs.npm-post-sync-script) && runner.os != 'Windows'
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      # New prefix generated every 120 days, to ensure npm cache doesn't grow too large
      - name: Get npm cache timed expiration
        id: npm-timed-expiration
        run: echo "prefix=$(( $(date +%s) / 60 / 60 / 24 / 120 ))" >> $GITHUB_OUTPUT

      - name: Restore cache using package-lock.json hash
        uses: actions/cache@v3
        if: (inputs.npm-pre-sync-script || inputs.npm-post-sync-script) && !inputs.no-lockfile
        with:
          path: ${{ steps.npm-cache-dir-windows.outputs.dir || steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ steps.npm-timed-expiration.outputs.prefix }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.npm-timed-expiration.outputs.prefix }}-

      - name: Restore cache using package.json hash
        uses: actions/cache@v3
        if: (inputs.npm-pre-sync-script || inputs.npm-post-sync-script) && inputs.no-lockfile
        with:
          path: ${{ steps.npm-cache-dir-windows.outputs.dir || steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ steps.npm-timed-expiration.outputs.prefix }}-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.npm-timed-expiration.outputs.prefix }}-

      - run: npm ci --no-audit --no-fund
        if: (inputs.npm-pre-sync-script || inputs.npm-post-sync-script) && !inputs.no-lockfile
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - run: npm install --no-audit --no-fund
        if: (inputs.npm-pre-sync-script || inputs.npm-post-sync-script) && inputs.no-lockfile
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      # Actual syncing

      - name: Run pre-sync npm script
        if: inputs.npm-pre-sync-script
        run: npm run ${{ inputs.npm-pre-sync-script }}

      - name: Fetch GitHub repository release data
        if: inputs.gh-release-org && inputs.gh-release-repo && inputs.path && !inputs.url
        run: |
          gh release download --repo "${{ inputs.gh-release-org }}/${{ inputs.gh-release-repo }}" --archive tar.gz
          tar -xvf ${{ inputs.gh-release-repo }}-*.tar.gz
          rm -rf ${{ inputs.path }}
          cp -Rv ${{ inputs.gh-release-repo }}-*/${{ inputs.gh-release-subpath }} ${{ inputs.path }}
          rm ${{ inputs.gh-release-repo }}-*.tar.gz
          rm -rf ${{ inputs.gh-release-repo }}-*/
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch URL data
        if: inputs.url && inputs.path
        run: curl --fail "${{ inputs.url }}" > ${{ inputs.path }}

      - name: Run post-sync npm script
        if: inputs.npm-post-sync-script
        run: npm run ${{ inputs.npm-post-sync-script }}

      # Commit, push and open a PR if that's the need

      # Inspired by https://github.com/actions/toolkit/blob/0db3029fcfcb1393a2b3ccd14caecd7a3460af4e/.github/workflows/update-github.yaml#L22-L23
      # And by https://github.com/actions/deploy-pages/blob/ff669327f73994ba35f45d1cd2fc81d82d1c852c/.github/workflows/rebuild-dependabot-prs.yml#L43-L44
      - name: Commit and push any changes
        id: push-changes
        run: |
          if [[ "$(git status --porcelain)" != "" ]]; then
            git config --global user.name "${{ inputs.commit-user }}"
            git config --global user.email "${{ inputs.commit-email }}"
            git checkout -b ${{ inputs.branch-name }}
            git add .
            if ${{ inputs.create-branch-if-needed }} || (git show-ref origin/${{ inputs.branch-name }} -q); then
              if (! git show-ref origin/${{ inputs.branch-name }} -q) || [[ "$(git diff origin/${{ inputs.branch-name }} --stat)" != "" ]]; then
                echo "createPR=true" >> $GITHUB_OUTPUT
                git commit -m "${{ inputs.commit-message }}"
                git push origin ${{ inputs.branch-name }} -fu --no-verify
              fi
            fi
          fi

      - name: Open a PR for the sync
        if: steps.push-changes.outputs.createPR
        continue-on-error: true
        run: gh pr create --head ${{ inputs.branch-name }} --title " ${{ inputs.pr-title }}" --body "${{ inputs.pr-body }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN_OVERRIDE || secrets.GITHUB_TOKEN }}
